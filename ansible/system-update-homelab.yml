---


- name: Upgrades packages and reboots (if necessary)
  hosts: homelab
  become: true
  serial: 0 # one host at a time
  any_errors_fatal: true
  max_fail_percentage: 0
  

  tasks: # tasks are done in order

    # do an "apt-get update", to ensure latest package lists
    - name: Running apt update
      apt:
        update-cache: yes
      changed_when: 0

    # get a list of packages that have updates
    - name: Getting list of pending updates
      command: apt-get --simulate dist-upgrade
      args:
        warn: false # don't warn us about apt having its own plugin
      register: apt_simulate
      changed_when: 0

    # if a new kernel is incoming, remove old ones to avoid full /boot
    - name: Running apt autoremove
      command: apt-get -y autoremove
      args:
        warn: false
      when: '"Inst linux-image-" in apt_simulate.stdout'
      changed_when: 0

    # do the actual apt-get dist-upgrade
    - name: Running dist-upgrade
      apt:
        upgrade: dist # upgrade all packages to latest version
      register: upgrade_output

    # check if we need a reboot
    - name: Check to see if reboot is needed
      stat: path=/var/run/reboot-required
      register: file_reboot_required

    # "meta: end_play" aborts the rest of the tasks in the current «tasks:»
    # section, for the current webserver
    # "when:" clause ensures that the "meta: end_play" only triggers if the
    # current webserver does _not_ need a reboot

    - meta: end_play
      when: not file_reboot_required.stat.exists

    - name: Rebooting {{ inventory_hostname }}
      shell: sleep 2 && shutdown -r now "Reboot triggered by ansible."
      async: 1
      poll: 0
      ignore_errors: true
      when: file_reboot_required.stat.exists

    # give sshd time to start fully
    - name: Wait for the reboot to complete if there was a change
      wait_for_connection:
        delay: 60
        timeout: 60
      when: file_reboot_required

    # wait a few seconds between hosts, unless we're on the last
    - name: Switching Hosts
      pause:
        seconds: 5
      when: inventory_hostname != ansible_play_hosts[-1]

